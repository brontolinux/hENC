body common control
{
      inputs => {
		  "module/enc.cf",
		  "tlib/henc_cfg_test.cf",
      } ;

      version => "hENC-v0.0.2" ;

	  bundlesequence => { "henc_cfg", "henc_test" } ;
}

bundle agent henc_test
{
  vars:
      "tests" int => "8" ;
      
  files:
      "$(henc_cfg.testdir)/."
	  comment => "Prepare test directory",
	  create => "yes" ;

  methods:
      "tap_banner" usebundle => henc_tap_banner($(tests)) ;
      "basic"      usebundle => henc_test_basic ;
      "commands"   usebundle => henc_test_commands ;
}

bundle agent henc_tap_banner(n) { reports: "$(const.n)1..$(n)" ; }

bundle agent henc_test_basic
{
  vars:
    any::
      "enclist" slist => { "henc_set","henc_override" } ;

  classes:
    any::
      "pass_3_reached" expression => "pass_2_reached" ;
      "pass_2_reached" expression => "pass_1_reached" ;
      "pass_1_reached" expression => "any" ;

      "henc_test_scalar_ok"
	  expression => regcmp("hENC test","$(henc.test_scalar)") ;

      "all_tests_ok"
	  and => { "global_class_to_be_set_by_henc",
		   "!global_class_to_be_cancelled_by_henc",
		   "!global_class_to_be_lowered",
		   "henc_test_scalar_ok",
		   "henc_test_list_ok" } ;

    pass_2_reached::
      # must not evaluate before henc runs...
      "henc_test_list_ok"
	  comment => "list must not be set",
	  not => isvariable("henc.test_list") ;

  files:
    !pass_2_reached::
      # this must run only at pass 1, to prepare for the tests
      "$(henc_cfg.testdir)/$(enclist)" delete => tidy ;
      

  methods:
      "henc"
	  comment => "test ENC",
	  usebundle => henc("$(this.bundle).enclist") ;

  reports:
    global_class_to_be_set_by_henc::
      "$(const.n)ok - global_class_to_be_set_by_henc found" ;

    !global_class_to_be_set_by_henc::
      "$(const.n)not ok - global_class_to_be_set_by_henc not found" ;

    global_class_to_be_cancelled_by_henc::
      "$(const.n)not ok - global_class_to_be_cancelled_by_henc found" ;

    !global_class_to_be_cancelled_by_henc::
      "$(const.n)ok -1 global_class_to_be_cancelled_by_henc not found" ;

    global_class_to_be_lowered::
      "$(const.n)not ok - global_class_to_be_lowered found" ;

    !global_class_to_be_lowered::
      "$(const.n)ok - global_class_to_be_lowered not found" ;

    pass_2_reached.henc_test_scalar_ok::
      "$(const.n)ok - test scalar has the expected value" ;

    pass_2_reached.!henc_test_scalar_ok::
      "$(const.n)not ok - test scalar has not the expected value" ;

    pass_2_reached.henc_test_list_ok::
      "$(const.n)ok - test list was slashed by henc" ;

    pass_2_reached.!henc_test_list_ok::
      "$(const.n)not ok - test list was not slashed by henc" ;
}


bundle agent henc_test_commands
{
  methods:
      "test_reset_active"    usebundle => henc_test_reset_active ;
      "test_reset_cancelled" usebundle => henc_test_reset_cancelled ;
      "test_reset_all"       usebundle => henc_test_reset_all ;
}


bundle agent henc_test_reset_active
{
  vars:
    any::
      "enclist" slist => { "henc_reset_active" } ;
      "active_classes"
	  slist => { "active_class_1","active_class_2",
		     "active_class_3" } ;
      
      "cancelled_classes"
	  slist => { "cancelled_class_1", "cancelled_class_2",
		     "cancelled_class_3" } ;

      "all_classes"
	  slist => { @(active_classes), @(cancelled_classes) } ;
      

  classes:
    any::
      "pass_3_reached" expression => "pass_2_reached" ;
      "pass_2_reached" expression => "pass_1_reached" ;
      "pass_1_reached" expression => "any" ;

    !pass_2_reached::
      # Set these classes only at pass 1, then let the module kill them
      "cancelled_class_1" expression => "any" ;
      "cancelled_class_2" expression => "any" ;
      "cancelled_class_3" expression => "any" ;

    pass_2_reached::
      # From pass 2 on, check for the result of the test
      "any_class_set" expression => "$(all_classes)" ;
      "test_ok"       not => "any_class_set" ;


  files:
    !pass_2_reached::
      # this must run only at pass 1, to prepare for the tests
      "$(henc_cfg.testdir)/$(enclist)" delete => tidy ;
      
  methods:
      "henc"
	  comment => "test ENC",
	  usebundle => henc("$(this.bundle).enclist") ;

  reports:
    pass_2_reached.test_ok::
      "$(const.n)ok - active classes correctly reset" ;

    pass_2_reached.!test_ok::
      "$(const.n)not ok - active classes not reset" ;
}


bundle agent henc_test_reset_cancelled
{
  vars:
    any::
      "enclist" slist => { "henc_reset_cancelled" } ;
      "active_classes"
	  slist => { "active_class_4","active_class_5",
		     "active_class_6" } ;
      
      "cancelled_classes"
	  slist => { "cancelled_class_4", "cancelled_class_5",
		     "cancelled_class_6" } ;

      "all_classes"
	  slist => { @(active_classes), @(cancelled_classes) } ;

      "all_classes_set_expr"
	  string => join(".","all_classes") ;
      

  classes:
    any::
      "pass_3_reached" expression => "pass_2_reached" ;
      "pass_2_reached" expression => "pass_1_reached" ;
      "pass_1_reached" expression => "any" ;

    !pass_2_reached::
      # Set these classes only at pass 1, the module must not kill them
      "cancelled_class_4" expression => "any" ;
      "cancelled_class_5" expression => "any" ;
      "cancelled_class_6" expression => "any" ;

    pass_2_reached::
      # From pass 2 on, check for the result of the test
      # All classes must still be active
      "test_ok" expression => "$(all_classes_set_expr)" ;


  files:
    !pass_2_reached::
      # this must run only at pass 1, to prepare for the tests
      "$(henc_cfg.testdir)/$(enclist)" delete => tidy ;
      
  methods:
      "henc"
	  comment => "test ENC",
	  usebundle => henc("$(this.bundle).enclist") ;

  reports:
    pass_2_reached.test_ok::
      "$(const.n)ok - cancelled classes correctly reset" ;

    pass_2_reached.!test_ok::
      "$(const.n)not ok - cancelled classes not reset" ;
}


bundle agent henc_test_reset_all
{
  vars:
    any::
      "enclist" slist => { "henc_reset_all" } ;
      "active_classes"
	  slist => { "active_class_7","active_class_8",
		     "active_class_9" } ;
      
      "cancelled_classes"
	  slist => { "cancelled_class_7", "cancelled_class_8",
		     "cancelled_class_9" } ;

      "any_active_class_set_expr"
	  string => join('|',"active_classes") ;

      "all_cancelled_classes_set_expr"
	  string => join('.',"cancelled_classes") ;

      "test_ok_expr"
	  string => "!($(any_active_class_set_expr)).($(all_cancelled_classes_set_expr))" ;
      

  classes:
    any::
      "pass_3_reached" expression => "pass_2_reached" ;
      "pass_2_reached" expression => "pass_1_reached" ;
      "pass_1_reached" expression => "any" ;

    !pass_2_reached::
      # Set these classes only at pass 1, the module must not kill them
      "cancelled_class_7" expression => "any" ;
      "cancelled_class_8" expression => "any" ;
      "cancelled_class_9" expression => "any" ;

    pass_2_reached::
      # From pass 2 on, check for the result of the test
      # All classes must still be active
      "test_ok" expression => "$(test_ok_expr)" ;


  files:
    !pass_2_reached::
      # this must run only at pass 1, to prepare for the tests
      "$(henc_cfg.testdir)/$(enclist)" delete => tidy ;
      
  methods:
      "henc"
	  comment => "test ENC",
	  usebundle => henc("$(this.bundle).enclist") ;

  reports:
    pass_2_reached.test_ok::
      "$(const.n)ok - all classes in ENC correctly reset" ;

    pass_2_reached.!test_ok::
      "$(const.n)not ok - all classes in ENC not correctly reset" ;
}
